{"version":3,"sources":["main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["\"use strict\";\n\n//CONSTANTES GLOBALES\n\n//Traigo los elementos de html y los guardo en variables\nconst searchInput = document.querySelector(\".js-input\");\nconst searchBtn = document.querySelector(\".js-btn\");\nconst cardsList = document.querySelector(\".js-list\");\nconst favCardsList = document.querySelector(\".js-fav-list\");\n\n// Declaro un array vacío donde luego irán los datos de la API\nlet charactersList = [];\n\n//Array de favoritos (también vacío) a partir de las tarjetas seleccionadas\nlet favouriteCharacters = [];\n\n//FUNCIONES\n\n//RECOJO DATOS DE LA API. Vuelvo a la primera versión de la función con fetch, porque del localStorage sólo quiero las favoritas, y había guardado todas\nfunction getData() {\n  fetch(\"https://breakingbadapi.com/api/characters\")\n    .then((response) => response.json())\n    .then((data) => {\n      charactersList = data;\n      renderCharactersList();\n    });\n}\n\n//Función para pintar la tarjeta en sí, con sus elementos de html\nfunction renderCards(character) {\n  let card = `<li class='cards-list-item'>\n    <article class='card js-card' id='${character.char_id}'>\n      <img src='${character.img}' alt='Picture of ${character.name}' title='${character.name}' class='card-img' />\n      <h3 class='card-name'>${character.name}</h3>\n      <p class='card-status'>${character.status}</p>\n    </article>\n  </li>`;\n\n  return card;\n}\n\n//Función para pintar la lista completa de tarjetas de cada personaje\nfunction renderCharactersList() {\n  let characterCardList = \"\";\n  for (const card of charactersList) {\n    characterCardList += renderCards(card);\n  }\n  cardsList.innerHTML = characterCardList;\n  cardListeners();\n}\n\n//Función para pintar la tarjeta en sí, esta vez para los personajes favoritos\nfunction renderFavCard(favCharacter) {\n  let favCard = `<li class=\"cards-list-item\">\n    <article class=\"card js-fav-card selected\" id=\"${favCharacter.char_id}\">\n      <i class=\"fa-solid fa-square-xmark\"></i>  \n      <img src=\"${favCharacter.img}\" alt=\"Picture of ${favCharacter.name}\" title=\"${favCharacter.name}\" class=\"card-img\" />\n      <h3 class=\"card-name\">${favCharacter.name}</h3>\n      <p class=\"card-status\">${favCharacter.status}</p>\n    </article>\n  </li>`;\n\n  return favCard;\n}\n\n//Función para PINTAR el listado de tarjetas de mis FAVORITOS\nfunction renderFavCharacters() {\n  let favCharacterCardList = \"\";\n  for (const card of favouriteCharacters) {\n    favCharacterCardList += renderFavCard(card);\n  }\n  favCardsList.innerHTML = favCharacterCardList;\n  favCardListeners();\n}\n\n//Función para FILTRAR según lo que se escriba en el input (una vez dado al botón)\nfunction filterCards() {\n  const searchedCharacter = searchInput.value.toLowerCase();\n  cardsList.innerHTML = \"\";\n\n  const filteredCharacters = charactersList.filter((character) =>\n    character.name.toLowerCase().includes(searchedCharacter)\n  );\n\n  for (const character of filteredCharacters) {\n    const filteredCard = renderCards(character);\n    cardsList.innerHTML += filteredCard;\n  }\n}\n\n//EVENTOS\n\n//Función que crea un bucle para recorrer los elementos del array generado con QSA y así nos permite aplicarle el EVENTLISTENER a cada tarjeta del listado general\nfunction cardListeners() {\n  const allCharacterCards = document.querySelectorAll(\".js-card\");\n  for (const eachCard of allCharacterCards) {\n    eachCard.addEventListener(\"click\", handleClickCard);\n  }\n}\n\n//Mismo tipo de función, esta vez para añadir listeners a las tarjetas favoritas\nfunction favCardListeners() {\n  const favCharacterCards = document.querySelectorAll(\".js-fav-card\");\n\n  for (const eachCard of favCharacterCards) {\n    eachCard.addEventListener(\"click\", handleClickFavCard);\n  }\n}\n\n// Función para buscar los obj seleccionados y generar un nuevo array con ellos\nfunction handleClickCard(event) {\n  //Elimino la línea de código que me pintaba la tarjeta en el listado general, sólo la quiero pintada en favoritos\n  const current = parseInt(event.currentTarget.id);\n\n  const selectedCard = charactersList.find(\n    (eachCardObj) => eachCardObj.char_id === current\n  );\n  //Busco el problema y era que una era string y otra number, uso typeof, por eso creo una variable donde recoger el nuevo valor (en nº) para comparar\n\n  const cardFavouriteIndex = favouriteCharacters.findIndex(\n    (eachCardObj) => eachCardObj.char_id === current\n  );\n\n  //Si no está en favoritos, haz el push (cambio condicional para que ya no la elimine desde el listado general, sino desde favoritos, en otra parte del código)\n  if (cardFavouriteIndex === -1) {\n    favouriteCharacters.push(selectedCard);\n    //guardo el listado de favoritas en localStorage\n    localStorage.setItem(\"favourites\", JSON.stringify(favouriteCharacters));\n  }\n\n  renderFavCharacters();\n}\n\n//(Revisar, aún NO FUNCIONA) - Función para eliminar la tarjeta de favoritos, al clickarla\nfunction handleClickFavCard(event) {\n  const current = parseInt(event.currentTarget.id);\n  const selectedCard = favouriteCharacters.find(\n    (eachCardObj) => eachCardObj.char_id === current\n  );\n\n  const cardFavouriteIndex = favouriteCharacters.findIndex(\n    (eachCardObj) => eachCardObj.char_id === current\n  );\n  if (cardFavouriteIndex !== -1) {\n    favouriteCharacters.splice(cardFavouriteIndex, 1);\n  }\n}\n\n//Función manejadora del botón de buscar, que nos lleva a la función de filtrado\nfunction handleSearch(event) {\n  event.preventDefault();\n  filterCards();\n}\n\n//Evento para escuchar al botón de buscar\nsearchBtn.addEventListener(\"click\", handleSearch);\n\n//Al abrir la página, quiero los datos de la API\ngetData();\n//y mis favoritas guardadas en localStorage\nconst favouritesInLocalSt = JSON.parse(localStorage.getItem(\"favourites\"));\nconsole.log(favouritesInLocalSt);\n\nif (favouritesInLocalSt !== null) {\n  favouriteCharacters = favouritesInLocalSt;\n  renderFavCharacters();\n}\n"]}