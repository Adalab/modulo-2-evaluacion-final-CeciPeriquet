{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["\"use strict\";\n\n//CONSTANTES\n\n//Me traigo los elementos de html y los meto en variables\nconst searchInput = document.querySelector(\".js-input\");\nconst searchBtn = document.querySelector(\".js-btn\");\nconst cardsList = document.querySelector(\".js-list\");\nconst favCardsList = document.querySelector(\".js-fav-list\");\n\n// Declaro un array vacío donde luego meteré los datos de la API\nlet charactersList = [];\n\n//Array de favoritos (también vacío) a partir de las tarjetas seleccionadas\nlet favouriteCharacters = [];\n\n//FUNCIONES\n\n//Función para pintar la tarjeta en sí, con sus elementos de html\nfunction renderCards(character) {\n  let card = `<li class=\"cards-list-item\">\n    <article class=\"card js-card\" id=\"${character.char_id}\">\n      <img src=\"${character.img}\" alt=\"Picture of ${character.name}\" title=\"${character.name}\" class=\"card-img\" />\n      <h3 class=\"card-name\">${character.name}</h3>\n      <p class=\"card-status\">${character.status}</p>\n    </article>\n  </li>`;\n\n  return card;\n}\n\n//Función para pintar las tarjetas de cada personaje\nfunction renderCharactersList() {\n  let characterCardList = \"\";\n  for (const card of charactersList) {\n    characterCardList += renderCards(card);\n  }\n  cardsList.innerHTML = characterCardList;\n  cardListeners();\n}\n\n//Función para pintar la tarjeta en sí, esta vez para los personajes favoritos\nfunction renderFavCard(favCharacter) {\n  let favCard = `<li class=\"cards-list-item\">\n    <article class=\"card js-card selected\" id=\"${favCharacter.char_id}\">\n      <img src=\"${favCharacter.img}\" alt=\"Picture of ${favCharacter.name}\" title=\"${favCharacter.name}\" class=\"card-img\" />\n      <h3 class=\"card-name\">${favCharacter.name}</h3>\n      <p class=\"card-status\">${favCharacter.status}</p>\n    </article>\n  </li>`;\n\n  return favCard;\n}\n\n//Función para pintar las tarjetas de mis favoritos\n\nfunction renderFavCharacters() {\n  let favCharacterCardList = \"\";\n  for (const card of favouriteCharacters) {\n    favCharacterCardList += renderFavCard(card);\n  }\n  favCardsList.innerHTML = favCharacterCardList;\n}\n\n// Función para buscar los obj seleccionados y generar un nuevo array con ellos\nfunction handleClickCard(event) {\n  event.currentTarget.classList.toggle(\"selected\");\n  const current = parseInt(event.currentTarget.id);\n\n  const selectedCard = charactersList.find(\n    (eachCardObj) => eachCardObj.char_id === current);\n    //Busco el problema y era que una era string y otra number, uso typeof, por eso creo una variable donde recoger el nuevo valor (en nº) para comparar\n  \n  const cardFavouriteIndex = favouriteCharacters.findIndex(\n    (eachCardObj) => eachCardObj.char_id === current);\n  \n  //Si no está en favoritos, haz el push, si ya está, elimínala\n  if (cardFavouriteIndex === -1) { \n    favouriteCharacters.push(selectedCard);\n  } else {\n    favouriteCharacters.splice(cardFavouriteIndex, 1);\n  }\n\n  renderFavCharacters();\n}\n\n//Función que crea un bucle para recorrer los elementos del array generado con QSA y así nos permite aplicarle el eventListener\nfunction cardListeners() {\n  const allCharacterCards = document.querySelectorAll(\".js-card\");\n  for (const eachCard of allCharacterCards) {\n    eachCard.addEventListener(\"click\", handleClickCard);\n  }\n}\n\n//Pido los datos a la API mediante Fetch (compruebo que me genera un array de objetos)\nfunction getData() {\n  fetch(\"https://breakingbadapi.com/api/characters\")\n    .then((response) => response.json())\n    .then((data) => {\n      charactersList = data;\n      //no me estaba leyendo bien las funciones porque le pedía data.results y en este caso era solo data\n      renderCharactersList();\n    });\n}\n\nfunction handleSearch() {}\n\n//EVENTOS\n\n//Evento para cuando quiera escuchar al botón (aún no)\nsearchBtn.addEventListener(\"click\", handleSearch);\n\n//Al abrir la página, quiero los datos del API\ngetData();\n"]}