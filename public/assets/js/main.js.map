{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["\"use strict\";\n\n//CONSTANTES GLOBALES\n\n//Traigo los elementos de html y los guardo en variables\nconst searchInput = document.querySelector(\".js-input\");\nconst searchBtn = document.querySelector(\".js-btn\");\nconst cardsList = document.querySelector(\".js-list\");\nconst favCardsList = document.querySelector(\".js-fav-list\");\n\n// Declaro un array vacío donde luego irán los datos de la API\nlet charactersList = [];\n\n//Array de favoritos (también vacío) a partir de las tarjetas seleccionadas\nlet favouriteCharacters = [];\n\n//FUNCIONES\n\n//Mejoro la función para obtener los datos al abrir la página(localStorage/API)\nfunction getData(){\n\nconst charactersListStored = JSON.parse(localStorage.getItem(\"charactersList\"));\n\nif (charactersListStored !== null) {\n  //Si existe el listado de personajes en el localStorage, toma los datos de ahí y píntalos\n  charactersList = charactersListStored;\n  renderCharactersList();\n} else {\n  //Si no existe el listado de personajes en el localStorage, haz la petición al servidor y luego guarda los datos en localStorage\n  fetch(\"https://breakingbadapi.com/api/characters\")\n    .then((response) => response.json())\n    .then((data) => {\n      charactersList = data;\n      localStorage.setItem(\"charactersList\", JSON.stringify(charactersList));\n      renderCharactersList();\n    })\n}\n}\n\n//Función para pintar la tarjeta en sí, con sus elementos de html\nfunction renderCards(character) {\n  let card = `<li class=\"cards-list-item\">\n    <article class=\"card js-card\" id=\"${character.char_id}\">\n      <img src=\"${character.img}\" alt=\"Picture of ${character.name}\" title=\"${character.name}\" class=\"card-img\" />\n      <h3 class=\"card-name\">${character.name}</h3>\n      <p class=\"card-status\">${character.status}</p>\n    </article>\n  </li>`;\n\n  return card;\n}\n\n//Función para pintar la lista completa de tarjetas de cada personaje\nfunction renderCharactersList() {\n  let characterCardList = \"\";\n  for (const card of charactersList) {\n    characterCardList += renderCards(card);\n  }\n  cardsList.innerHTML = characterCardList;\n  cardListeners();\n}\n\n//Función para pintar la tarjeta en sí, esta vez para los personajes favoritos\nfunction renderFavCard(favCharacter) {\n  let favCard = `<li class=\"cards-list-item\">\n    <article class=\"card js-card selected\" id=\"${favCharacter.char_id}\">\n      <img src=\"${favCharacter.img}\" alt=\"Picture of ${favCharacter.name}\" title=\"${favCharacter.name}\" class=\"card-img\" />\n      <h3 class=\"card-name\">${favCharacter.name}</h3>\n      <p class=\"card-status\">${favCharacter.status}</p>\n    </article>\n  </li>`;\n\n  return favCard;\n}\n\n//Función para pintar el listado de tarjetas de mis favoritos\nfunction renderFavCharacters() {\n  let favCharacterCardList = \"\";\n  for (const card of favouriteCharacters) {\n    favCharacterCardList += renderFavCard(card);\n  }\n  favCardsList.innerHTML = favCharacterCardList;\n}\n\n\n\n//Función para filtrar según lo que se escriba en el input (una vez dado al botón)\nfunction filterCards() {\n  const searchedCharacter = searchInput.value.toLowerCase();\n  cardsList.innerHTML = \"\";\n\n  const filteredCharacters = charactersList\n    .filter((character) =>\n      character.name.toLowerCase().includes(searchedCharacter)\n    )\n\n  for (const character of filteredCharacters) {\n     const filteredCard = renderCards(character);\n     cardsList.innerHTML += filteredCard;\n  }\n}\n\n\n//EVENTOS\n\n//Función que crea un bucle para recorrer los elementos del array generado con QSA y así nos permite aplicarle el eventListener a cada tarjeta\nfunction cardListeners() {\n  const allCharacterCards = document.querySelectorAll(\".js-card\");\n  for (const eachCard of allCharacterCards) {\n    eachCard.addEventListener(\"click\", handleClickCard);\n  }\n}\n\n// Función para buscar los obj seleccionados y generar un nuevo array con ellos\nfunction handleClickCard(event) {\n  event.currentTarget.classList.toggle(\"selected\");\n  const current = parseInt(event.currentTarget.id);\n\n  const selectedCard = charactersList.find(\n    (eachCardObj) => eachCardObj.char_id === current\n  );\n  //Busco el problema y era que una era string y otra number, uso typeof, por eso creo una variable donde recoger el nuevo valor (en nº) para comparar\n\n  const cardFavouriteIndex = favouriteCharacters.findIndex(\n    (eachCardObj) => eachCardObj.char_id === current\n  );\n\n  //Si no está en favoritos, haz el push, si ya está, elimínala\n  if (cardFavouriteIndex === -1) {\n    favouriteCharacters.push(selectedCard);\n  } else {\n    favouriteCharacters.splice(cardFavouriteIndex, 1);\n  }\n\n  renderFavCharacters();\n}\n\n//Función manejadora del botón de buscar, que nos lleva a la función de filtrado\nfunction handleSearch(event) {\n  event.preventDefault();\n  filterCards();\n}\n\n//Evento para escuchar al botón de buscar\nsearchBtn.addEventListener(\"click\", handleSearch);\n\n//Al abrir la página, quiero los datos de la API (añado una nueva función para que guarde los datos en localStorage y a futuro sean los que utilice en lugar del fetch)\ngetData();\n\n"]}